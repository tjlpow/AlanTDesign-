var localData = `
     <p>今天在Medium看到一篇用研方法的介绍—— <b>卡诺模型（The Kano Analysis）。</b>用以分析一个产品功能是否能使用户满意，这种方法的优点是能得出一个实实在在的数据结论，帮助决策。计算方式也挺简单的，问卷操作也比较容易简单，成本很低。我本人特别喜欢这种能快速验证的低成本方法，能在有限的时间与人力资源条件下，也能快速得出可靠的数据参考与清晰的结论。正如我<a href="http://www.jianshu.com/p/6528d04108c0" target="_blank">上一篇文章介绍的方法</a>一样，能大大提高沟通效率，减少无谓的争吵。本方法对功能的五种划分也蛮有意思，让我想起锤子科技，锤子的手机就是特别注重软件上的Delightful Features而忽略其他硬件上的Required Features。这就恰恰解释了为何锤子销量与认知度不成正比。</p><p>原文我就不全翻了，我只把关键的内容翻下，由于Medium需要梯子，所以我在征得作者同意的情况下把原文粘贴在此。有梯子的同学请<a href="https://medium.muz.li/the-kano-analysis-c16e7d681158" target="_blank">点此传送</a>。 </p><p>受行为科学家赫兹伯格的双因素理论的启发，东京理工大学教授狩野纪昭(Noriaki Kano)和他的同事Fumio Takahashi于1979年10月发表了《质量的保健因素和激励因素》(Motivator and Hygiene Factor in Quality)一文。<br></p><p>该方法把产品功能划分为以下五种：</p><h4><b>Desired Features 期望功能 <br></b></h4><p>当提供此功能，用户满意度会提升，当不提供此功能，用户满意度会降低；<br></p><h4><b>Required Features 必备功能 </b></h4><p>当优化此功能，用户满意度不会提升，当不提供此功能，用户满意度会大幅降低；<br></p><h4><b>Delightful Features 魅力功能 </b></h4><p>用户意想不到的，如果不提供此功能，用户满意度不会降低，但当提供此功能，用户满意度会有很大提升；</p><h4><b>Indifferent Features 无差异功能</b></h4><p>无论提供或不提供此功能，用户满意度都不会有改变，用户根本不在意；<br></p><h4><b>Anti-feature Features 反向功能</b></h4><p>用户根本都没有此功能，提供后用户满意度反而会下降。</p><p>方法采用问卷提问的方式收集数据，最后通过数据整合得出一个功能的两个系数：<b>满意系数 Satisfaction Coefficient </b>与 <b>不满意系数 Diss<b>atisfaction Coefficient。</b></b><b>如果满意系数高于不满意系数，该功能值得做。</b></p><p><b><br></b></p><p><b>以下是原文内容 Let's Go：</b></p><h1>The Kano Analysis<br>
</h1><h4>A Better Way Discover What Users Really Want From Your Product</h4><p>by <a href="https://twitter.com/brianeoneill" target="_blank">Brian O'Neill</a><br></p><p>You’re on the design team for Crunchrr, a new app that helps users discover cereals they’ll love. Users can:</p><p>- Create a profile and connect with others</p><p>- Discover cereals based on their preferences</p><p>- Rate and review cereals</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-bd231a278d0af739.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-bd231a278d0af739.png?imageMogr2/auto-orient/strip"><br><div class="image-caption"></div>
</div><p>Crunchrr is in the hands of some early adopters who are loving its core features. Things are going great. That is, until the requests start rolling in.</p><p>Annelise from marketing says: “Crunchrr needs a map view so users can see where each cereal is made. People are really interested in where their food comes from nowadays, so this is really a must! Besides, every app has a map view.” Kevin from sales was at a meeting with a potential advertiser who asks: “Where’s the chatbot? You can’tnothave a chatbot. Conversational UI is the future!”</p><p>One of your early adopters pings you to suggest: “There should be a button so I can email the cereal maker to request a gluten-free version.” Another one says: “Maybe there could be something like Shazam for cereal. That way, if I’m in a restaurant I can take a picture of what the person at the next table is eating and it’ll show me what that cereal is.”</p><p>The next thing you know, your backlog is a gaggle of suggestions, requests, and demands. It seems that everyone has brilliant idea that justhasto go into the next release.</p><p>This can’t be avoided. Everyone has an opinion and given the opportunity, they’ll express it. And people easily fall into a “more is better” mentality. More features equals a better product, and the more of each feature, the better.</p><p>The obvious problem is that you can’t deliver on every request. Not only that, but all ideas aren’t created equal, and users are often at a loss as to how to articulate what they really want and need. On the other hand, internal stakeholders tend to view features in the narrow context of their own interests. How do you stop the madness?</p><blockquote>
<p><i>“The most important thing that a team can do to help their design is to say no to almost any idea for a feature”</i></p>
<p><i>— Jared Spool</i></p>
</blockquote><p>You need a way to predict user satisfaction that lets you prioritize feature releases and even re-evaluate existing features. And you need hard data to support your decisions about what goes into Crunchrr and when. That’s where the<a href="https://en.wikipedia.org/wiki/Kano_model" target="_blank">Kano Model</a>comes in.</p><h2>The Kano Model</h2><p>In 1984 professor Noriaki Kano presented a model that predicts how satisfied people will be with a product based on its features. Since then, the Kano Model has become a standard design tool because of how effectively it can make typically invisible ideas about quality visible. The core principle of the model is that satisfaction can be plotted along five distinct curves.<a href="https://medium.muz.li/the-kano-analysis-c16e7d681158#_ftn1" target="_blank">[1]</a></p><h2>Curve 1: Desired Features</h2><p>Remember when I said more isn’t always better? Well,sometimesit is it is. More storage space or battery life is better. Faster download speeds? Better. These are all examples of where the user will usually express greater satisfaction in direct proportion to how much of the feature they get.</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-c1c795ebe03acb04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-c1c795ebe03acb04.png?imageMogr2/auto-orient/strip"><br><div class="image-caption"></div>
</div><p>With desired features, satisfaction is directly proportional to feature implementation</p><p>In the case of Crunchrr, desired features could be:</p><p>- Speed and responsiveness</p><p>- Number of users to connect with</p><p>- Suggestions based on stated preferences and past browsing behavior</p><p>- Options for quickly zeroing in on a kind of cereal (sorting, filtering, etc.)</p><p>- Size of cereal selection</p><h2>Curve 2: Required Features</h2><p>Required features are the ones users expect and take for granted.</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-4971d65f1ad80271.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-4971d65f1ad80271.png?imageMogr2/auto-orient/strip"><br><div class="image-caption">With required features satisfaction levels off once the basic need has been met</div>
</div><p><br></p><p>Users are dissatisfied when a required feature is not present and satisfied when it is. But that satisfaction levels off after a certain point. This makes sense when you think about it. If a wheel doesn’t roll, it will cause dissatisfaction. If it does roll, it will cause satisfaction. But it’s hard to get anyone excited about a wheel that rollsreally, reallywell. In the case of Crunchrr, as with most other apps, this could mean things like:</p><p>- Reliable uptime</p><p>- Search</p><p>- Ability to create a profile</p><p>- Easy log in/out</p><h2>Curve 3: Delightful Features</h2><p>Delightful features are the ones that make an app fun to use and give it a personality. They’re the features you love, but don’t expect. It could be as simple as when the login form appears to shake its head when you enter the wrong credentials. Or it could be the tone of the writing or a fun mascot character or some unique interaction.</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-58d5d18541138634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-58d5d18541138634.png?imageMogr2/auto-orient/strip"><br><div class="image-caption">Users are satisfied with delightful features, but are not dissatisfied when they are absent</div>
</div><p><br></p><p>As you can see from the graph, users express increased satisfaction with delightful features. But there’s no dissatisfaction when they’re not present. Also, as with required features, there’s a limit to just how delighted a user can be. After a certain point, there are diminishing returns. ­</p><p>Annelise’s map view is probably an example of a delighter because it’s little more than eye candy, and it certainly isn’t solving any of the currently defined business needs for Crunchrr.</p><p>Delightful features are an important part of the user experience, and shouldn’t be ignored. But<a href="https://uxdesign.cc/the-dangers-of-delightful-design-bb5834a1b684" target="_blank">they come with a shelf life</a>, in part because they’re so easily imitated. For a while, the swiping interaction was a big part of Tinder’s unique identity. Now, Tinder is just<a href="https://www.fastcompany.com/3033319/six-new-apps-that-use-tinders-swipe-theory" target="_blank">one of many apps</a>where users can swipe left or right. In other words, over time, delightful features go on to become desired or even required features.</p><h2>Curve 4: Indifferent Features</h2><p>These are features the user simply doesn’t care about either way. Whether they’re implemented fully or not at all, they won’t change users’ opinions about the app, or change how they use it.</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-be78e1e43f2017a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-be78e1e43f2017a9.png?imageMogr2/auto-orient/strip"><br><div class="image-caption">Neutral features don’t affect satisfaction one way or another</div>
</div><h2>Curve 5: Anti-features</h2><p>Anti-features are the features that users actively dislike. (Remember <a href="https://en.wikipedia.org/wiki/Office_Assistant" target="_blank">Clippy</a>?) And the more these features are implemented, the greater the dissatisfaction. Anti-features are like the mirror opposite of desired features.</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-2d793c61c7e4a3fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-2d793c61c7e4a3fb.png?imageMogr2/auto-orient/strip"><br><div class="image-caption">Anti-features are the ones that frustrate or annoy users. Dissatisfaction is directly proportional to implementation</div>
</div><h2>Putting it All Together</h2><p>Looking at all of these features together not only provides a clear pictorial representation of how features will be perceived, but also helps you figure out strategic direction.</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-a0060ca6f70fdfde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-a0060ca6f70fdfde.png?imageMogr2/auto-orient/strip"><br><div class="image-caption">The complete Kano Model diagram</div>
</div><p>Desired Features:Resources should be invested heavily in these features, because they are key to user adoption and retention, as well as competitive advantage<br></p><p>Required Features:Resources should be invested heavily in these features, but only until basic needs have been met.</p><p>Delightful Features:It’s fine to invest resources here, but not at the expense of desired and required features. However, delightful features are often key differentiators that can build loyalty and buzz.</p><p>Indifferent Features and Anti-features:Resources should be invested only in identifying these so as not to waste cycles on building and implementing them.</p><p>By now I hope you’re sold on the Kano Model. Then the next question is: How do you find out which features belong to each category? That’s where the Kano Analysis comes in.</p><h2>The Kano Analysis</h2><p>To find out which features belong where, we need to ask our users. But remember, users are not usually great at identifying or expressing what they really want and need. The Kano Analysis accounts for this by asking questions in pairs: afunctional questionfollowed by adysfunctional question. Let’s go back to Annelise’s suggestion of a map view for Crunchrr. We could ask a question pair about this feature like this:</p><p>If Crunchrr let you see on a map where a brand of cereal is made, how would you feel?</p><p>If Crunchrr did not let you see on a map where a brand of cereal is made, how would you feel?</p><p>For both functional and dysfunctional questions, users must choose one of the following answers:</p><p>- I like it that way</p><p>- I expect it that way</p><p>- I am neutral about it</p><p>- I can live with it that way</p><p>- I dislike it that way</p><p>You would prepare an entire questionnaire in this style for each of the features in your backlog. Each user’s answers can then be analyzed by plotting its outcome in the following table.</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-1faaec2435d9be55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-1faaec2435d9be55.png?imageMogr2/auto-orient/strip"><br><div class="image-caption">The analysis table tells you where a user would place a feature in the Kano Model based on how the functional and dysfunctional responses compare</div>
</div><p>It should be clear that if a user likes it when the feature is present and dislikes it when it’s not, then that is a desired feature. The designation ofquestionablehappens when the answers apparently contradict each other. (This is often the result of the user not understanding the question.)</p><p>Great. We’re almost done. The final piece is to aggregate all of the survey responses to find the overall results for each feature. (Alternatively, you could break this down even further and aggregate responses based on personas.)</p><h2>Coefficients</h2><p>After you’ve aggregated all of the responses, you’ll calculate the satisfaction and dissatisfaction coefficients. The satisfaction coefficient is a number between 0 and 1: the closer to 1, the stronger the influence on satisfaction. The dissatisfaction coefficient is a number between 0 and -1: the closer the closer to -1, the stronger the influence on dissatisfaction. We calculate the coefficients with these formulas:</p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-fc52e04edeb8b32e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-fc52e04edeb8b32e.png?imageMogr2/auto-orient/strip"><br><div class="image-caption"></div>
</div><p>Let’s say that the aggregated responses for the map view breaks down like this:</p><p>Desired: 5%</p><p>Required: 12%</p><p>Delightful: 4%</p><p>Indifferent: 23%</p><p>Anti-feature: 31%</p><p>Questionable: 25%</p><p>That would give you these results:</p><p>Satisfaction: (4 + 5) / (4 + 5 + 12 + 23) =0.2045</p><p>Dissatisfaction: (5 + 12) / (4 + 5 + 12 + 23) * (-1) = -0.3864</p><p>As you can see, the map view feature is having a significantly stronger influence on dissatisfaction than on satisfaction. This clearly indicates that we should leave it out of Crunchrr. Sorry, Annelise! (Actually, if you saw these results in the real world, you wouldn’t even need to calculate the coefficients. Seeing 31% anti-feature and 25% questionable is enough to tell you not to include this feature. I used these exaggerated figures to highlight the differences produced in the coefficients.)</p><p>Other times, the coefficients will show little difference in influence. Cases like those will require a judgement call or re-testing.</p><h2>In Closing</h2><p>A Kano Analysis is cheap and easy to perform and provides clear vision into what users actually want and expect from your product. It also provides hard data, which breaks everyone out of the trap of biased or shortsighted thinking. There’s no need to argue and debate with internal stakeholders about which features are in or out. The numbers don’t lie!</p><p>Brian O’Neill @brianeoneill is a designer in the San Francisco Bay Area, currently at NVIDIA.</p><p><a href="https://medium.muz.li/the-kano-analysis-c16e7d681158#_ftnref1" target="_blank">[1]</a>These curves go by many different names, depending on the source. I picked these names arbitrarily. In the end, it doesn’t matter what they’re called.</p><p><br></p><div class="image-package">
<img src="//upload-images.jianshu.io/upload_images/233492-89855dd0ec0223ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/233492-89855dd0ec0223ed.png?imageMogr2/auto-orient/strip" data-image-slug="89855dd0ec0223ed" data-width="1018" data-height="589"><br><div class="image-caption"></div>
`

module.exports = {
  article: localData
}